<<<<<<< Updated upstream
<<<<<<< HEAD
<section class="update-section">
  <h2>Admin Page</h2>

  {{#if successMessage}}
    <div class="success-message">{{successMessage}}</div>
  {{/if}}

  {{#if errorMessage}}
    <div class="error-message">{{errorMessage}}</div>
  {{/if}}

  <form id="updateForm" action="/admin" method="POST" enctype="multipart/form-data" class="update-form">
    <div class="form-group">
      <label for="updateMethod">Choose update method:</label>
      <select id="updateMethod" name="updateMethod" required>
        <option value="" disabled selected>Select an option</option>
        <option value="manual">Manual Update</option>
        <option value="api">API Update</option>
      </select>
    </div>

    <div id="apiOptions" class="form-group hidden">
      <label for="updateMode">Choose update mode:</label>
      <select id="updateMode" name="updateMode">
        <option value="incremental">Incremental</option>
        <option value="full">Full</option>
      </select>


    </div>

    <div id="manualOptions" class="form-group hidden">
      <label for="jsonFile">Upload JSON file:</label>
      <input type="file" id="jsonFile" name="jsonFile" accept=".json" />
      <p class="note">Only files with correct structure will be accepted.</p>
      
      <div class="info-box">
        <strong>API Example:</strong>
        <code>https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false</code>
      </div>

      <div class="sample-json">
        <h4>Sample JSON format:</h4>
        <pre><code>[
  {
    "id": "bitcoin",
    "symbol": "btc",
    "name": "Bitcoin",
    "image": "https://coin-images.coingecko.com/coins/images/1/large/bitcoin.png?1696501400",
    "current_price": 83446,
    "market_cap": 1656759954192,
    "market_cap_rank": 1,
    "fully_diluted_valuation": 1656762291077,
    "total_volume": 28617618534,
    "high_24h": 85732,
    "low_24h": 83197,
    "price_change_24h": -1869.07,
    "price_change_percentage_24h": -2.19,
    "market_cap_change_24h": -35224528531,
    "market_cap_change_percentage_24h": -2.08,
    "circulating_supply": 19850903,
    "total_supply": 19850931,
    "max_supply": 21000000,
    "ath": 108786,
    "ath_change_percentage": -23.24,
    "ath_date": "2025-01-20T09:11:54.494Z",
    "atl": 67.81,
    "atl_change_percentage": 123035.87,
    "atl_date": "2013-07-06T00:00:00.000Z",
    "roi": null,
    "last_updated": "2025-04-13T23:46:54.606Z"
  }
]</code></pre>
      </div>
    </div>

    <button type="submit" class="btn">Run Update</button>
  </form>
</section>

<!-- External JS -->
<script src="../public/js/admin.js"></script>
=======

=======
<section class="admin-container">
{{!-- Admin Panel --}}
 <h1>Admin Panel</h1>
>>>>>>> Stashed changes

 <label for="dbSelection">Select Database:</label>
 <select id="dbSelection">
    <option value="cryptoRatings">Crypto Ratings</option>
    <option value="financialData">Financial Data</option>
 </select>

 <div id="updateOptions">
    <button id="fullUpdate">Update Entire Database</button>
    <button id="individualUpdate">Update Individual Asset</button>
 </div>

 <div id="individualAssetSection" style="display: none;">
    <label for="assetSelection">Select Asset:</label>
    <select id="assetSelection"></select>
    
    <button id="autoUpdate">Auto Update</button>
    <button id="manualUpdate">Manual Update</button>
 </div>

 <div id="manualUpdateSection" style="display: none;">
    <form id="manualUpdateForm">
        <label for="marketCap">Market Cap:</label>
        <input type="text" id="marketCap" name="marketCap" required>

        <label for="currentPrice">Current Price:</label>
        <input type="text" id="currentPrice" name="currentPrice" required>

        <label for="circulatingSupply">Circulating Supply:</label>
        <input type="text" id="circulatingSupply" name="circulatingSupply" required>

        <label for="totalSupply">Total Supply:</label>
        <input type="text" id="totalSupply" name="totalSupply" required>

        <label for="ath">All-Time High:</label>
        <input type="text" id="ath" name="ath" required>

        <label for="athDate">ATH Date:</label>
        <input type="date" id="athDate" name="athDate" required>

        <button type="submit">Submit Update</button>
    </form>
 </div>

 <table border="1">
    <thead>
        <tr>
            <th>Name</th>
            <th>Market Cap</th>
            <th>Price</th>
            <th>Circulating Supply</th>
            <th>Total Supply</th>
            <th>ATH</th>
            <th>Last Updated</th>
        </tr>
    </thead>
    <tbody id="cryptoTableBody"></tbody>
 </table>

 <script>
    document.addEventListener("DOMContentLoaded", async () => {
        const dbSelection = document.getElementById("dbSelection");
        const fullUpdateBtn = document.getElementById("fullUpdate");
        const individualUpdateBtn = document.getElementById("individualUpdate");
        const individualAssetSection = document.getElementById("individualAssetSection");
        const assetSelection = document.getElementById("assetSelection");
        const autoUpdateBtn = document.getElementById("autoUpdate");
        const manualUpdateBtn = document.getElementById("manualUpdate");
        const manualUpdateSection = document.getElementById("manualUpdateSection");
        const manualUpdateForm = document.getElementById("manualUpdateForm");
        const tableBody = document.getElementById("cryptoTableBody");
        
        async function fetchAssets() {
            const response = await fetch("/admin/cryptos");
            const data = await response.json();
            assetSelection.innerHTML = "";
            data.forEach(asset => {
                let option = document.createElement("option");
                option.value = asset.id;
                option.textContent = asset.name;
                assetSelection.appendChild(option);
            });
        }
        
        async function fetchAndRenderTable() {
            const response = await fetch("/admin/cryptos");
            const data = await response.json();
            tableBody.innerHTML = "";
            data.forEach(asset => {
                let row = `<tr>
                    <td>${asset.name}</td>
                    <td>${asset.market_cap}</td>
                    <td>${asset.current_price}</td>
                    <td>${asset.circulating_supply}</td>
                    <td>${asset.total_supply}</td>
                    <td>${asset.ath}</td>
                    <td>${asset.last_updated}</td>
                </tr>`;
                tableBody.innerHTML += row;
            });
        }

        fullUpdateBtn.addEventListener("click", async () => {
            await fetch("/admin/generate-database", { method: "POST" });
            fetchAndRenderTable();
        });

        individualUpdateBtn.addEventListener("click", async () => {
            individualAssetSection.style.display = "block";
            await fetchAssets();
        });

        autoUpdateBtn.addEventListener("click", async () => {
            const id = assetSelection.value;
            await fetch("/admin/update-daily", { method: "POST" });
            fetchAndRenderTable();
        });

        manualUpdateBtn.addEventListener("click", () => {
            manualUpdateSection.style.display = "block";
        });

        manualUpdateForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const id = assetSelection.value;
            const updates = {
                market_cap: document.getElementById("marketCap").value,
                current_price: document.getElementById("currentPrice").value,
                circulating_supply: document.getElementById("circulatingSupply").value,
                total_supply: document.getElementById("totalSupply").value,
                ath: document.getElementById("ath").value,
                ath_date: document.getElementById("athDate").value,
            };
            await fetch("/admin/modify", {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ id, updates }),
            });
            fetchAndRenderTable();
        });
        
        fetchAndRenderTable();
    });
 </script>

<<<<<<< Updated upstream
      const data = await response.json();
      statusMessage.textContent = data.message;
    } catch (error) {
      statusMessage.textContent = 'Error updating database.';
    }
  });

  // Handle incremental update
  incrementalUpdateBtn.addEventListener('click', async () => {
    try {
      const response = await fetch('/admin/incremental-update', {
        method: 'POST'
      });

      const data = await response.json();
      statusMessage.textContent = data.message;
    } catch (error) {
      statusMessage.textContent = 'Error performing incremental update.';
    }
  });
</script>
>>>>>>> 719f7b3d (Updated local code with Watchlist, Register features, and bug fixes)
=======
</section>
>>>>>>> Stashed changes
